{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GitHub Actions und Verwendung von GitHub mit Visual Studio","text":""},{"location":"legal/imprint/","title":"Impressum","text":"Unterrichtshilfe - Berufsschule und Berufliches Gymnasium <p>f\u00fcr die Integration in die schulische (IT-)Projektorganisation in den Unterricht am BSZET Dresden. </p> <p></p> erstellt von <p>Fachbereich Informatik und IT-Systeme</p> <p>BSZ Elektrotechnik Dresden 01219 Dresden Strehlener Platz 2</p> <p>\u00a9 2022</p>"},{"location":"schulung_vs_cs/cicd_gh-deploy/","title":"Automatisierung von gh-deploy","text":""},{"location":"schulung_vs_cs/cicd_gh-deploy/#ausgangssituation-ist","title":"Ausgangssituation (IST)","text":"<p>Eine in einem GitHub-Repo gespeicherte MKDocs Webseite wird mithilfe des 'mkdocs.exe gh-deploy'-Befehls in eine GitHub-Pages kompatible Version umgewandelt und auf dem Branch 'gh-pages' hochgeladen. Jedes mal, wenn eine \u00c4nderung der Webseite erfolgt, wird der Befehl erneut ausgef\u00fchrt und so die Webseite auf GitHub-Pages aktualisiert.</p>"},{"location":"schulung_vs_cs/cicd_gh-deploy/#ziel-soll","title":"Ziel (SOLL)","text":"<p>Nach jeder \u00c4nderung im GitHub-Repository soll die Webseite automatisch aktualisiert werden.</p>"},{"location":"schulung_vs_cs/cicd_gh-deploy/#umsetzung-des-ziels-mittels-github-actions","title":"Umsetzung des Ziels mittels GitHub Actions","text":"<ol> <li>Lese/Schreib Zugriff f\u00fcr GitHub-Actions Bot erlauben<ol> <li>GitHub Repo &gt; Einstellungen &gt; Actions &gt; Allgemein &gt; Workflow Berechtigungen aus Lese/Schreib Zugriff erlauben </li> </ol> </li> <li>Anlegen der Datei .github/workflows/gh-deploy.yml</li> <li>konfigurieren der GitHub-Action: <pre><code>00 name: gh-deploy \n01 on:\n02   push:\n03     branches:\n04       - main\n05 jobs:\n06   deploy:\n07     runs-on: ubuntu-latest\n08     steps:\n09       - uses: actions/checkout@v2\n10       - uses: actions/setup-python@v2\n11         with:\n12           python-version: 3.x\n13       - run: pip install mkdocs-material \n14       - run: mkdocs gh-deploy --force\n</code></pre></li> <li>\u00c4nderungen committen und pushen</li> </ol> <p>Die oben erstellte gh-deploy.yml installiert, nach jedem Push auf dem Branch 'main', Python und mkdocs in einer Ubuntu Umgebung. Anschlie\u00dfend f\u00fchrt sie den gh-deploy Befehl aus.</p> Linie Beschreibung 1-4 Auf\u00fchrung bei Push auf 'main'-Branch 9-10 F\u00fchrt von GitHub vordefinierte Befehle aus: - checkout: macht das Repository f\u00fcr die Action verwendbar - setup-python: installiere Python 12 benutze/installiere Python Version 3 im 'setup-python' Befehl 13 installiere das pip(Python) modul 'mkdocs-material' 14 f\u00fchre den 'mkdocs gh-deploy'-Befehl aus"},{"location":"schulung_vs_cs/gh-actions/","title":"GitHub Actions","text":"<p>GitHub Actions k\u00f6nnen alle m\u00f6glichen Aufgaben eines Anwendungsentwicklers erf\u00fcllen. Nachdem der Quellcode vom Entwickler geschrieben und auf das Git-Repo 'gepusht' wurde, kann der Code mittels GitHub-Actions auf Fehler \u00fcberpr\u00fcft, Tests durchgef\u00fchrt oder auch in eine Anwendung kompiliert werden. Daf\u00fcr beschreibt man in einer Action, welche Befehle wann ausgef\u00fchrt werden sollen.</p>"},{"location":"schulung_vs_cs/gh-actions/#cicd","title":"CI/CD","text":"<p>Die oben genannten Vorg\u00e4nge werden als Continous Integration(CI) und Continous Deployment (CD) bezeichnet.</p> Quelle: http://testbone.com/blog/continuous-integration/cover.jpg Zugriff am 27.09.2023 07:15"},{"location":"schulung_vs_cs/gh-actions/#continous-integration","title":"Continous Integration","text":"<p>Integration von Quellcode in ein Projekt. * \u00dcberpr\u00fcfen auf Fehler im Code * Syntax \u00dcberpr\u00fcfung * Style-/Form\u00fcberpr\u00fcfung * Tests des Codes * \u00dcberpr\u00fcfen der Umsetzbarkeit auf Produktiven Systemen</p>"},{"location":"schulung_vs_cs/gh-actions/#continous-deployment","title":"Continous Deployment","text":"<p>Umsetzen des Codes auf produktive Systeme oder erstellen von Anwendbarer Software.</p> <ul> <li>kompilieren von Code</li> <li>platzieren von Dateien auf Servern</li> <li>Verteilen von Updates</li> <li>Erstellen von Containern</li> </ul>"},{"location":"schulung_vs_cs/gh-actions/#funktionsweise","title":"Funktionsweise","text":"<p>GitHub Actions werden in YAML-Konfigurationsdateien beschrieben. In diesen k\u00f6nnen u.a. folgende Eigenschaften beschrieben werden.</p> <ul> <li>name der Action</li> <li>wann wird die Action ausgef\u00fchrt</li> <li>wo wird die Action ausgef\u00fchrt (Betriebssystem, custom Runner, etc.)</li> <li>was f\u00fchrt die Action aus</li> </ul> <p>Die Dateien werden im .github/workflows Ordner innerhalb des Git-Repos abgelegt.</p>"},{"location":"schulung_vs_cs/gh-actions/#beispiel","title":"Beispiel","text":"<p>Folgend wird eine GitHub Action mit dem namen 'Hallo Welt' beschrieben. Diese wird nach jedem push auf das repository ausgef\u00fchrt. Die Action beinhaltet zwei Jobs: \"Hallo-Welt\" und \"Hallo-IGD20\". Jeder Job f\u00fchrt den 'echo'-Befehl auf einem Ubuntu-System aus, welcher eine Nachricht in die Konsole schreibt. <pre><code>name: Hallo Welt\non: [push]\njobs:\n  Hallo-Welt:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"Hallo Welt!\"\n  Hallo-IGD20:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"Hallo IGD20!\"\n</code></pre></p> Feld Beschreibung name Name der Action on Bei welchem Ereignis wird die Action ausgef\u00fchrt jobs logische Unterteilung der Action in Abschnitte, \"Jobs\" runs-on Auf welchem Zielsystem soll die Action ausgef\u00fchrt werden"},{"location":"schulung_vs_cs/gh-actions/#umsetzung","title":"Umsetzung","text":"<ol> <li>im Repository den Ordner .github/workflows anlegen und Datei 'hallo_welt.yml' anlegen </li> <li>oben stehende Konfiguration in Datei einf\u00fcgen </li> <li>\u00c4nderungen commiten und pushen </li> <li>GitHub Action analysieren (GitHub Repo &gt; Actions)  </li> </ol>"},{"location":"schulung_vs_cs/visual_studio_github_cs/","title":"Github-Repository in Visual Studio klonen","text":""},{"location":"schulung_vs_cs/visual_studio_github_cs/#ausgangspunkt-ist","title":"Ausgangspunkt (IST)","text":"<p>Im Repository befindet sich eine ZIP-Datei mit dem zugeh\u00f6rigen Projekt \"handelskalkulation\", gef\u00fchrt unter dem Ordner \"Projekte\" \u2192 \"Schulung Github\" </p> <p>Download:  Handelskalkulation</p>"},{"location":"schulung_vs_cs/visual_studio_github_cs/#ziel-soll","title":"Ziel (Soll)","text":"<p>Ziel ist es jetzt daf\u00fcr zu sorgen, dass das Projekt sowohl in Github implementiert wird, als auch das \u00c4nderungen automatisch \u00fcbernommen werden.</p>"},{"location":"schulung_vs_cs/visual_studio_github_cs/#vorgehensweise","title":"Vorgehensweise","text":"<p>Gegebenenfalls muss zuerst der Proxy neu eingestellt werden: git config --global http.proxy http://kjs-04.lan.dd-schulen.de:3128 </p> <ol> <li>neues Repository auf GitHub erstellen </li> <li>lokalen Speicherort w\u00e4hlen und Repository klonen </li> <li>C#-Projekt in lokalem Repository speichern/einf\u00fcgen </li> <li>\"git add .\" alle \u00c4nderungen hinzuf\u00fcgen und danach \"git commit\" alles best\u00e4tigen </li> <li>Commit-Nachricht hinzuf\u00fcgen </li> <li>Repository auf GitHub pushen </li> <li>Visual Studio \u00f6ffnen (die Normale, nicht die lokale Version) </li> <li>\"Repository klonen\" ausw\u00e4hlen und Link von GitHub-Repo einf\u00fcgen  </li> <li>in ge\u00f6ffnetem Code eine \u00c4nderung zum Test vornehmen </li> <li>alles hinzuf\u00fcgen (add), Nachricht eingeben (commit) und commit ausf\u00fchren  </li> <li>push ausf\u00fchren um \u00c4nderung auf Github Repository zu \u00fcbertragen (erneute Authentifizierung)  </li> </ol>"}]}